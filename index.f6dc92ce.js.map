{"mappings":"C,A,W,IKAsC,EAAK,E,E,C,EGApC,SAAS,EAAqB,CAAG,CAAE,CAAG,EACrC,CAAA,AAAO,MAAP,GAAe,EAAM,EAAI,MAAM,AAAN,GAAQ,CAAA,EAAM,EAAI,MAAM,AAAN,EAE/C,IAAK,IAAI,EAAI,EAAG,EAAO,AAAI,MAAM,GAAM,EAAI,EAAK,IAAK,CAAI,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAErE,OAAO,CACX,CNJA,IAAM,EAAN,eES2C,EFTrC,SAAA,IASF,IAAA,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAe,CACb,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,EAdC,ACFC,SAA2B,CAAQ,CAAE,CAAW,EACnD,GAAI,CAAE,CAAA,aAAoB,CAAA,EAAc,MAAM,AAAI,UAAU,oCAChE,EDAM,IAAA,CAAA,GAgBF,IAAI,CAAC,KAAK,CIZH,ACJJ,SAA8B,CAAG,EACpC,GAAI,MAAM,OAAO,CAAC,GAAM,OAAO,AAAA,EAAqB,EACxD,ELcqB,IIZmB,AGNjC,SAA4B,CAAI,EACnC,GAAI,AAAkB,aAAlB,OAAO,QAA0B,AAAyB,MAAzB,CAAI,CAAC,OAAO,QAAQ,CAAC,EAAY,AAAsB,MAAtB,CAAI,CAAC,aAAa,CACpF,OAAO,MAAM,IAAI,CAAC,EAE1B,EPcqB,IIZ8C,AKJ5D,SAAwC,CAAC,CAAE,CAAM,EACpD,GAAK,GACL,GAAI,AAAa,UAAb,OAAO,EAAgB,OAAO,AAAA,EAAqB,EAFT,KAAA,GAI9C,IAAI,EAAI,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,EAAG,IAGnD,GADU,WAAN,GAAkB,EAAE,WAAW,EAAE,CAAA,EAAI,EAAE,WAAW,CAAC,IAAI,AAAJ,EACnD,AAAM,QAAN,GAAe,AAAM,QAAN,EAAa,OAAO,MAAM,IAAI,CAAC,GAClD,GAAI,AAAM,cAAN,GAAqB,2CAA2C,IAAI,CAAC,GAAI,OAAO,AAAA,EAAqB,EAR3D,KAAA,GASlD,ETOqB,IIZqF,AINnG,WACH,MAAM,AAAI,UAAU,uIACxB,IRiBI,IAAI,CAAC,MAAM,CAjBT,EAiBiB,MAAM,CAAC,IAAI,CAC9B,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,YAAY,CAAG,C,CAnBlB,OESqC,EFTrC,C,CAsBJ,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAEA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAEA,IAAA,YAAA,MAAA,WAGE,OAFA,IAAI,CAAC,YAAY,GAEV,IAAI,CAAC,MAAM,AACpB,C,E,CAEA,IAAA,QAAA,MAAA,WACE,IAAI,CAAC,MAAM,CArCT,EAqCiB,MAAM,CAAC,OAAO,CACjC,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GACrC,IAAI,CAAC,gBAAgB,GACrB,IAAI,CAAC,gBAAgB,GACrB,IAAI,CAAC,UAAU,EACjB,C,E,CAEA,IAAA,UAAA,MAAA,WACE,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,MAAM,CA/CT,EA+CiB,MAAM,CAAC,IAAI,CAC9B,IAAI,CAAC,KAAK,CAAG,CACf,C,E,CAEA,IAAA,WAAA,MAAA,WACE,GAAI,IAAI,CAAC,MAAM,GApDb,EAoDuB,MAAM,CAAC,OAAO,EAIvC,IAAI,CAAC,SAAS,GAId,IAAK,IAFD,EAAe,CAAA,EAEV,EAAM,EAAG,EAAM,EAAG,IAGzB,IAAK,IAFD,EAAgB,CAAA,EAEX,EAAO,EAAG,EAAO,EAAG,IAC3B,GAAI,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAK,CAAG,EAAG,CAK7B,IAJA,IAAI,EAAW,EAEX,EAAQ,CAAA,EAEL,AAAyC,IAAzC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAO,EAAW,EAAE,EACzC,IAWF,GAPG,GACD,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAO,EAAW,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAK,GAE9D,IACA,EAAQ,CAAA,GAGN,EAAW,EAAG,CAChB,GAAI,CAAC,GAAiB,EAAO,CAC3B,EAAgB,CAAA,EAEhB,IAAM,EAAY,AAAmC,EAAnC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAO,EAAS,AAElD,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAO,EAAS,CAAG,EAEnC,IAAI,CAAC,KAAK,EAAI,CAChB,MACE,EAAgB,CAAA,EAEhB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAO,EAAS,CAAG,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAK,AAG1D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAK,CAAG,EAExB,EAAe,CAAA,CACjB,CACF,CAQJ,OAJI,GACF,IAAI,CAAC,gBAAgB,GAGhB,EACT,C,E,CAEA,IAAA,YAAA,MAAA,WACE,GAAI,IAAI,CAAC,MAAM,GAhHb,EAgHuB,MAAM,CAAC,OAAO,EAIvC,IAAI,CAAC,SAAS,GAId,IAAK,IAFD,EAAe,CAAA,EAEV,EAAM,EAAG,EAAM,EAAG,IAGzB,IAAK,IAFD,EAAgB,CAAA,EAEX,EAAO,EAAG,GAAQ,EAAG,IAC5B,GAAI,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAK,CAAG,EAAG,CAI7B,IAHA,IAAI,EAAW,EACX,EAAQ,CAAA,EAEL,AAAyC,IAAzC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAO,EAAW,EAAE,EACzC,IAWF,GAPG,GACD,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAO,EAAW,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAK,GAE9D,IACA,EAAQ,CAAA,GAGN,EAAW,EAAG,CAChB,GAAI,CAAC,GAAiB,EAAO,CAC3B,EAAgB,CAAA,EAEhB,IAAM,EAAY,AAAmC,EAAnC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAO,EAAS,AAElD,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAO,EAAS,CAAG,EAEnC,IAAI,CAAC,KAAK,EAAI,CAChB,MACE,EAAgB,CAAA,EAEhB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAO,EAAS,CAAG,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAK,AAG1D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAK,CAAG,EACxB,EAAe,CAAA,CACjB,CACF,CAQJ,OAJI,GACF,IAAI,CAAC,gBAAgB,GAGhB,EACT,C,E,CAEA,IAAA,SAAA,MAAA,WACE,GAAI,IAAI,CAAC,MAAM,GA1Kb,EA0KuB,MAAM,CAAC,OAAO,EAIvC,IAAI,CAAC,SAAS,GAId,IAAK,IAFD,EAAe,CAAA,EAEV,EAAS,EAAG,EAAS,EAAG,IAG/B,IAAK,IAFD,EAAgB,CAAA,EAEX,EAAO,EAAG,EAAO,EAAG,IAC3B,GAAI,IAAI,CAAC,KAAK,CAAC,EAAK,CAAC,EAAO,CAAG,EAAG,CAIhC,IAHA,IAAI,EAAW,EACX,EAAQ,CAAA,EAGV,EAAO,EAAW,GAAK,GACvB,AAA4C,IAA5C,IAAI,CAAC,KAAK,CAAC,EAAO,EAAW,EAAE,CAAC,EAAO,EAEvC,IAYF,GARE,CAAC,GACD,EAAO,EAAW,GAAK,GACvB,IAAI,CAAC,KAAK,CAAC,EAAO,EAAW,EAAE,CAAC,EAAO,GAAK,IAAI,CAAC,KAAK,CAAC,EAAK,CAAC,EAAO,GAEpE,IACA,EAAQ,CAAA,GAGN,EAAW,EAAG,CAChB,GAAI,CAAC,GAAiB,EAAO,CAC3B,EAAgB,CAAA,EAEhB,IAAM,EAAY,AAAsC,EAAtC,IAAI,CAAC,KAAK,CAAC,EAAO,EAAS,CAAC,EAAO,AAErD,CAAA,IAAI,CAAC,KAAK,CAAC,EAAO,EAAS,CAAC,EAAO,CAAG,EAEtC,IAAI,CAAC,KAAK,EAAI,CAChB,MACE,EAAgB,CAAA,EAEhB,IAAI,CAAC,KAAK,CAAC,EAAO,EAAS,CAAC,EAAO,CAAG,IAAI,CAAC,KAAK,CAAC,EAAK,CAAC,EAAO,AAGhE,CAAA,IAAI,CAAC,KAAK,CAAC,EAAK,CAAC,EAAO,CAAG,EAE3B,EAAe,CAAA,CACjB,CACF,CAQJ,OAJI,GACF,IAAI,CAAC,gBAAgB,GAGhB,EACT,C,E,CAEA,IAAA,WAAA,MAAA,WACE,GAAI,IAAI,CAAC,MAAM,GAzOb,EAyOuB,MAAM,CAAC,OAAO,EAIvC,IAAI,CAAC,SAAS,GAId,IAAK,IAFD,EAAe,CAAA,EAEV,EAAS,EAAG,EAAS,EAAG,IAG/B,IAAK,IAFD,EAAgB,CAAA,EAEX,EAAO,EAAG,GAAQ,EAAG,IAC5B,GAAI,IAAI,CAAC,KAAK,CAAC,EAAK,CAAC,EAAO,CAAG,EAAG,CAIhC,IAHA,IAAI,EAAW,EACX,EAAQ,CAAA,EAGV,EAAO,EAAW,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EACvC,AAA4C,IAA5C,IAAI,CAAC,KAAK,CAAC,EAAO,EAAW,EAAE,CAAC,EAAO,EAEvC,IAYF,GARE,CAAC,GACD,EAAO,EAAW,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EACvC,IAAI,CAAC,KAAK,CAAC,EAAO,EAAW,EAAE,CAAC,EAAO,GAAK,IAAI,CAAC,KAAK,CAAC,EAAK,CAAC,EAAO,GAEpE,IACA,EAAQ,CAAA,GAGN,EAAW,EAAG,CAChB,GAAI,CAAC,GAAiB,EAAO,CAC3B,EAAgB,CAAA,EAEhB,IAAM,EAAY,AAAsC,EAAtC,IAAI,CAAC,KAAK,CAAC,EAAO,EAAS,CAAC,EAAO,AAErD,CAAA,IAAI,CAAC,KAAK,CAAC,EAAO,EAAS,CAAC,EAAO,CAAG,EAEtC,IAAI,CAAC,KAAK,EAAI,CAChB,MACE,EAAgB,CAAA,EAEhB,IAAI,CAAC,KAAK,CAAC,EAAO,EAAS,CAAC,EAAO,CAAG,IAAI,CAAC,KAAK,CAAC,EAAK,CAAC,EAAO,AAGhE,CAAA,IAAI,CAAC,KAAK,CAAC,EAAK,CAAC,EAAO,CAAG,EAE3B,EAAe,CAAA,CACjB,CACF,CAQJ,OAJI,GACF,IAAI,CAAC,gBAAgB,GAGhB,EACT,C,E,CAEA,IAAA,YAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAC,CAAvB,EAA+B,OAAA,EAAI,KAAK,E,EAC1C,C,E,CAEA,IAAA,mBAAA,MAAA,WAGE,IAFA,IAAI,EAAM,IAAI,CAAC,YAAY,CAAC,GAErB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,QAAQ,CAAC,IAC/B,EAAM,IAAI,CAAC,YAAY,CAAC,GAK1B,IAFA,IAAI,EAAO,IAAI,CAAC,YAAY,CAAC,GAEtB,AAA0B,IAA1B,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAK,EAC1B,EAAO,IAAI,CAAC,YAAY,CAAC,GAG3B,IAAM,EAAW,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAC,CAAjC,EAAgD,OAAA,EAAW,KAAK,E,EAEhE,CAAA,CAAQ,CAAC,EAAI,CAAC,EAAK,CAAG,IAAI,CAAC,iBAAiB,GAC5C,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,UAAU,EACjB,C,E,CAEA,IAAA,eAAA,MAAA,SAAa,CAAG,EACd,OAAO,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EACpC,C,E,CAEA,IAAA,oBAAA,MAAA,WAGE,OAAO,AAFQ,KAAK,MAAM,GAEV,GAAM,EAAI,CAC5B,C,E,CAEA,IAAA,eAAA,MAAA,WACM,IAAI,CAAC,YAAY,GACnB,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,GAAG,CACpB,IAAI,CAAC,aAAa,IAC3B,CAAA,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,IAAI,AAAJ,CAE9B,C,E,CAEA,IAAA,eAAA,MAAA,WACO,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAc,IAAI,CAAC,KAAK,CAAC,IAAI,EAAA,CAAA,OAAA,QAAA,CAAA,GAA7B,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAiC,CAAjC,IAAM,EAAN,EAAA,KAAA,CACH,GAAI,AAAS,OAAT,EACF,MAAO,CAAA,CAEX,C,C,M,E,CAJK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAML,MAAO,CAAA,CACT,C,E,CAEA,IAAA,gBAAA,MAAA,WACO,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAc,IAAI,CAAC,KAAK,CAAC,IAAI,EAAA,CAAA,OAAA,QAAA,CAAA,GAA7B,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAiC,CAAjC,IAAM,EAAN,EAAA,KAAA,CACH,GAAI,AAAS,IAAT,EACF,MAAO,CAAA,CAEX,C,C,M,E,CAJK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAML,IAAK,IAAI,EAAM,EAAG,GAAO,EAAG,IAC1B,IAAK,IAAI,EAAO,EAAG,GAAQ,EAAG,IAC5B,GAAI,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAK,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAO,EAAE,CACrD,MAAO,CAAA,EAKb,IAAK,IAAI,EAAS,EAAG,GAAU,EAAG,IAChC,IAAK,IAAI,EAAO,EAAG,GAAQ,EAAG,IAC5B,GAAI,IAAI,CAAC,KAAK,CAAC,EAAK,CAAC,EAAO,GAAK,IAAI,CAAC,KAAK,CAAC,EAAO,EAAE,CAAC,EAAO,CAC3D,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,C,E,CAEA,IAAA,aAAA,MAAA,WAIE,IAAK,IAHC,EAAQ,SAAS,sBAAsB,CAAC,cACxC,EAAY,IAAI,CAAC,KAAK,CAAC,IAAI,GAExB,EAAI,EAAG,EAAI,EAAU,MAAM,CAAE,IAAK,CACzC,IAAM,EAAc,CAAK,CAAC,EAAE,CACtB,EAAe,CAAS,CAAC,EAAE,AAE7B,CAAA,EAAe,EACG,KAAA,IAAhB,IACF,EAAY,WAAW,CAAG,EAC1B,EAAY,SAAS,CAAG,0BAAuC,MAAA,CAAb,IAGhC,KAAA,IAAhB,IACF,EAAY,WAAW,CAAG,GAC1B,EAAY,SAAS,CAAG,aAG9B,CACF,C,E,CAEA,IAAA,gBAAA,MAAA,WACE,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EACvC,C,E,CEnYkB,AAZpB,SAA2B,CAAM,CAAE,CAAK,EACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACnC,IAAI,EAAa,CAAK,CAAC,EAAE,AACzB,CAAA,EAAW,UAAU,CAAG,EAAW,UAAU,EAAI,CAAA,EACjD,EAAW,YAAY,CAAG,CAAA,EAEtB,UAAW,GAAY,CAAA,EAAW,QAAQ,CAAG,CAAA,CAAjD,EAEA,OAAO,cAAc,CAAC,EAAQ,EAAW,GAAG,CAAE,EAClD,CACJ,EAEsC,AFVhC,EEU4C,SAAS,CAAE,GFVvD,C,IGFqC,EHGzB,CACd,KAAM,OACN,QAAS,UACT,IAAK,MACL,KAAM,MACR,EGPM,CAD8B,EHG7B,YADH,EGAE,OAAO,cAAc,CHAvB,EGA6B,EAAK,CAAE,MAAO,EAAO,WAAY,CAAA,EAAM,aAAc,CAAA,EAAM,SAAU,CAAA,CAAK,GAClG,AHDL,CGCQ,CAAC,EAAI,CAAG,EJAtB,IAAM,EAAO,GC+Yb,CAAA,EAAiB,CAAjB,ED7YM,EAAW,SAAS,aAAa,CAAC,UAClC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAQ,SAAS,aAAa,CAAC,eA2BrC,SAAS,EAAc,CAAQ,EAC7B,EAAS,cAAc,GAEvB,IAAI,EAAc,CAAA,EAElB,OAAQ,EAAS,GAAG,EAClB,IAAK,UACH,EAAc,EAAK,MAAM,GACzB,KAEF,KAAK,YACH,EAAc,EAAK,QAAQ,GAC3B,KAEF,KAAK,aACH,EAAc,EAAK,SAAS,GAC5B,KAEF,KAAK,YACH,EAAc,EAAK,QAAQ,EAE/B,CAEA,GAAI,EAAa,CAaE,EAZL,EAAK,QAAQ,GAa3B,EAAM,WAAW,CAAG,EAXlB,IAUiB,EAVX,EAAY,EAAK,SAAS,EAE5B,CAAA,IAAc,EAAK,MAAM,CAAC,IAAI,CAChC,EAAY,SAAS,CAAC,MAAM,CAAC,UACpB,IAAc,EAAK,MAAM,CAAC,GAAG,EACtC,EAAW,SAAS,CAAC,MAAM,CAAC,SAEhC,CACF,CAxDE,EAAS,gBAAgB,CAAC,QAAS,WAC7B,EAAS,SAAS,CAAC,QAAQ,CAAC,UAC9B,EAAS,SAAS,CAAG,iBACrB,EAAS,WAAW,CAAG,UACvB,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAK,KAAK,KAEV,EAAS,SAAS,CAAG,eACrB,EAAS,WAAW,CAAG,QACvB,EAAa,SAAS,CAAC,MAAM,CAAC,UAC9B,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAM,WAAW,CAAG,IAEpB,SAAS,mBAAmB,CAAC,UAAW,GACxC,EAAK,OAAO,IAGd,SAAS,gBAAgB,CAAC,UAAW,EACvC,E","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.state = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(initialState);\n        this.status = Game.Status.idle;\n        this.score = 0;\n        this.initialState = initialState;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                this.updateStatus();\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.status = Game.Status.playing;\n                this.state = this.initialState.concat();\n                this.createRandomTile();\n                this.createRandomTile();\n                this.printTiles();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.clearTheBoard();\n                this.printTiles();\n                this.status = Game.Status.idle;\n                this.score = 0;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status !== Game.Status.playing) return;\n                this.saveState();\n                var didTilesMove = false;\n                for(var row = 0; row < 4; row++){\n                    var didJustMerged = false;\n                    for(var tile = 1; tile < 4; tile++)if (this.state[row][tile] > 0) {\n                        var moveTile = 0;\n                        var merge = false;\n                        while(this.state[row][tile - moveTile - 1] === 0)moveTile++;\n                        if (!didJustMerged && this.state[row][tile - moveTile - 1] === this.state[row][tile]) {\n                            moveTile++;\n                            merge = true;\n                        }\n                        if (moveTile > 0) {\n                            if (!didJustMerged && merge) {\n                                didJustMerged = true;\n                                var newNumber = this.state[row][tile - moveTile] * 2;\n                                this.state[row][tile - moveTile] = newNumber;\n                                this.score += newNumber;\n                            } else {\n                                didJustMerged = false;\n                                this.state[row][tile - moveTile] = this.state[row][tile];\n                            }\n                            this.state[row][tile] = 0;\n                            didTilesMove = true;\n                        }\n                    }\n                }\n                if (didTilesMove) this.createRandomTile();\n                return didTilesMove;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.status !== Game.Status.playing) return;\n                this.saveState();\n                var didTilesMove = false;\n                for(var row = 0; row < 4; row++){\n                    var didJustMerged = false;\n                    for(var tile = 2; tile >= 0; tile--)if (this.state[row][tile] > 0) {\n                        var moveTile = 0;\n                        var merge = false;\n                        while(this.state[row][tile + moveTile + 1] === 0)moveTile++;\n                        if (!didJustMerged && this.state[row][tile + moveTile + 1] === this.state[row][tile]) {\n                            moveTile++;\n                            merge = true;\n                        }\n                        if (moveTile > 0) {\n                            if (!didJustMerged && merge) {\n                                didJustMerged = true;\n                                var newNumber = this.state[row][tile + moveTile] * 2;\n                                this.state[row][tile + moveTile] = newNumber;\n                                this.score += newNumber;\n                            } else {\n                                didJustMerged = false;\n                                this.state[row][tile + moveTile] = this.state[row][tile];\n                            }\n                            this.state[row][tile] = 0;\n                            didTilesMove = true;\n                        }\n                    }\n                }\n                if (didTilesMove) this.createRandomTile();\n                return didTilesMove;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status !== Game.Status.playing) return;\n                this.saveState();\n                var didTilesMove = false;\n                for(var column = 0; column < 4; column++){\n                    var didJustMerged = false;\n                    for(var tile = 1; tile < 4; tile++)if (this.state[tile][column] > 0) {\n                        var moveTile = 0;\n                        var merge = false;\n                        while(tile - moveTile - 1 >= 0 && this.state[tile - moveTile - 1][column] === 0)moveTile++;\n                        if (!didJustMerged && tile - moveTile - 1 >= 0 && this.state[tile - moveTile - 1][column] === this.state[tile][column]) {\n                            moveTile++;\n                            merge = true;\n                        }\n                        if (moveTile > 0) {\n                            if (!didJustMerged && merge) {\n                                didJustMerged = true;\n                                var newNumber = this.state[tile - moveTile][column] * 2;\n                                this.state[tile - moveTile][column] = newNumber;\n                                this.score += newNumber;\n                            } else {\n                                didJustMerged = false;\n                                this.state[tile - moveTile][column] = this.state[tile][column];\n                            }\n                            this.state[tile][column] = 0;\n                            didTilesMove = true;\n                        }\n                    }\n                }\n                if (didTilesMove) this.createRandomTile();\n                return didTilesMove;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status !== Game.Status.playing) return;\n                this.saveState();\n                var didTilesMove = false;\n                for(var column = 0; column < 4; column++){\n                    var didJustMerged = false;\n                    for(var tile = 2; tile >= 0; tile--)if (this.state[tile][column] > 0) {\n                        var moveTile = 0;\n                        var merge = false;\n                        while(tile + moveTile + 1 < this.state.length && this.state[tile + moveTile + 1][column] === 0)moveTile++;\n                        if (!didJustMerged && tile + moveTile + 1 < this.state.length && this.state[tile + moveTile + 1][column] === this.state[tile][column]) {\n                            moveTile++;\n                            merge = true;\n                        }\n                        if (moveTile > 0) {\n                            if (!didJustMerged && merge) {\n                                didJustMerged = true;\n                                var newNumber = this.state[tile + moveTile][column] * 2;\n                                this.state[tile + moveTile][column] = newNumber;\n                                this.score += newNumber;\n                            } else {\n                                didJustMerged = false;\n                                this.state[tile + moveTile][column] = this.state[tile][column];\n                            }\n                            this.state[tile][column] = 0;\n                            didTilesMove = true;\n                        }\n                    }\n                }\n                if (didTilesMove) this.createRandomTile();\n                return didTilesMove;\n            }\n        },\n        {\n            key: \"saveState\",\n            value: function saveState() {\n                return this.state.map(function(row) {\n                    return row.slice();\n                });\n            }\n        },\n        {\n            key: \"createRandomTile\",\n            value: function createRandomTile() {\n                var row = this.randomNumber(3);\n                while(!this.state[row].includes(0))row = this.randomNumber(3);\n                var cell = this.randomNumber(3);\n                while(this.state[row][cell] !== 0)cell = this.randomNumber(3);\n                var newState = this.state.map(function(currentRow) {\n                    return currentRow.slice();\n                });\n                newState[row][cell] = this.generateCellValue();\n                this.state = newState;\n                this.printTiles();\n            }\n        },\n        {\n            key: \"randomNumber\",\n            value: function randomNumber(max) {\n                return Math.round(Math.random() * max);\n            }\n        },\n        {\n            key: \"generateCellValue\",\n            value: function generateCellValue() {\n                var result = Math.random();\n                return result > 0.9 ? 4 : 2;\n            }\n        },\n        {\n            key: \"updateStatus\",\n            value: function updateStatus() {\n                if (this.didPlayerWin()) this.status = Game.Status.win;\n                else if (this.didPlayerLose()) this.status = Game.Status.lose;\n            }\n        },\n        {\n            key: \"didPlayerWin\",\n            value: function didPlayerWin() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.state.flat()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var tile = _step.value;\n                        if (tile === 2048) return true;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return false;\n            }\n        },\n        {\n            key: \"didPlayerLose\",\n            value: function didPlayerLose() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.state.flat()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var tile = _step.value;\n                        if (tile === 0) return false;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                for(var row = 0; row <= 3; row++)for(var tile1 = 0; tile1 <= 2; tile1++){\n                    if (this.state[row][tile1] === this.state[row][tile1 + 1]) return false;\n                }\n                for(var column = 0; column <= 3; column++)for(var tile2 = 0; tile2 <= 2; tile2++){\n                    if (this.state[tile2][column] === this.state[tile2 + 1][column]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"printTiles\",\n            value: function printTiles() {\n                var cells = document.getElementsByClassName(\"field-cell\");\n                var flatState = this.state.flat();\n                for(var i = 0; i < flatState.length; i++){\n                    var currentCell = cells[i];\n                    var currentState = flatState[i];\n                    if (currentState > 0) {\n                        if (currentCell !== undefined) {\n                            currentCell.textContent = currentState;\n                            currentCell.className = \"field-cell field-cell--\".concat(currentState);\n                        }\n                    } else if (currentCell !== undefined) {\n                        currentCell.textContent = \"\";\n                        currentCell.className = \"field-cell\";\n                    }\n                }\n            }\n        },\n        {\n            key: \"clearTheBoard\",\n            value: function clearTheBoard() {\n                this.state = this.initialState.concat();\n            }\n        }\n    ]);\n    return Game;\n}();\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"Status\", {\n    idle: \"idle\",\n    playing: \"playing\",\n    win: \"win\",\n    lose: \"lose\"\n});\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$startBtn = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$startMessage = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$winMessage = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$loseMessage = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\n$197cd56b15c33885$var$initialize();\nfunction $197cd56b15c33885$var$initialize() {\n    $197cd56b15c33885$var$startBtn.addEventListener(\"click\", function() {\n        if ($197cd56b15c33885$var$startBtn.classList.contains(\"start\")) {\n            $197cd56b15c33885$var$startBtn.className = \"button restart\";\n            $197cd56b15c33885$var$startBtn.textContent = \"Restart\";\n            $197cd56b15c33885$var$startMessage.classList.add(\"hidden\");\n            $197cd56b15c33885$var$game.start();\n        } else {\n            $197cd56b15c33885$var$startBtn.className = \"button start\";\n            $197cd56b15c33885$var$startBtn.textContent = \"Start\";\n            $197cd56b15c33885$var$startMessage.classList.remove(\"hidden\");\n            $197cd56b15c33885$var$winMessage.classList.add(\"hidden\");\n            $197cd56b15c33885$var$loseMessage.classList.add(\"hidden\");\n            $197cd56b15c33885$var$score.textContent = \"0\";\n            document.removeEventListener(\"keydown\", $197cd56b15c33885$var$handleKeyDown);\n            $197cd56b15c33885$var$game.restart();\n        }\n        document.addEventListener(\"keydown\", $197cd56b15c33885$var$handleKeyDown);\n    });\n}\nfunction $197cd56b15c33885$var$handleKeyDown(keyEvent) {\n    keyEvent.preventDefault();\n    var numbersMove = false;\n    switch(keyEvent.key){\n        case \"ArrowUp\":\n            numbersMove = $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            numbersMove = $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowRight\":\n            numbersMove = $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            numbersMove = $197cd56b15c33885$var$game.moveLeft();\n            break;\n    }\n    if (numbersMove) {\n        $197cd56b15c33885$var$updateScore($197cd56b15c33885$var$game.getScore());\n        var newStatus = $197cd56b15c33885$var$game.getStatus();\n        if (newStatus === $3d28d7f1aac198f5$exports.Status.lose) $197cd56b15c33885$var$loseMessage.classList.remove(\"hidden\");\n        else if (newStatus === $3d28d7f1aac198f5$exports.Status.win) $197cd56b15c33885$var$winMessage.classList.remove(\"hidden\");\n    }\n}\nfunction $197cd56b15c33885$var$updateScore(newScore) {\n    $197cd56b15c33885$var$score.textContent = newScore;\n}\n\n})();\n//# sourceMappingURL=index.f6dc92ce.js.map\n","\"use strict\";\n\nconst Game = require(\"../modules/Game.class\");\nconst game = new Game();\n\nconst startBtn = document.querySelector(\".start\");\nconst startMessage = document.querySelector(\".message-start\");\nconst winMessage = document.querySelector(\".message-win\");\nconst loseMessage = document.querySelector(\".message-lose\");\nconst score = document.querySelector(\".game-score\");\n\ninitialize();\n\nfunction initialize() {\n  startBtn.addEventListener(\"click\", () => {\n    if (startBtn.classList.contains(\"start\")) {\n      startBtn.className = \"button restart\";\n      startBtn.textContent = \"Restart\";\n      startMessage.classList.add(\"hidden\");\n      game.start();\n    } else {\n      startBtn.className = \"button start\";\n      startBtn.textContent = \"Start\";\n      startMessage.classList.remove(\"hidden\");\n      winMessage.classList.add(\"hidden\");\n      loseMessage.classList.add(\"hidden\");\n      score.textContent = \"0\";\n\n      document.removeEventListener(\"keydown\", handleKeyDown);\n      game.restart();\n    }\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n  });\n}\n\nfunction handleKeyDown(keyEvent) {\n  keyEvent.preventDefault();\n\n  let numbersMove = false;\n\n  switch (keyEvent.key) {\n    case \"ArrowUp\":\n      numbersMove = game.moveUp();\n      break;\n\n    case \"ArrowDown\":\n      numbersMove = game.moveDown();\n      break;\n\n    case \"ArrowRight\":\n      numbersMove = game.moveRight();\n      break;\n\n    case \"ArrowLeft\":\n      numbersMove = game.moveLeft();\n      break;\n  }\n\n  if (numbersMove) {\n    updateScore(game.getScore());\n\n    const newStatus = game.getStatus();\n\n    if (newStatus === Game.Status.lose) {\n      loseMessage.classList.remove(\"hidden\");\n    } else if (newStatus === Game.Status.win) {\n      winMessage.classList.remove(\"hidden\");\n    }\n  }\n}\n\nfunction updateScore(newScore) {\n  score.textContent = newScore;\n}\n","\"use strict\";\n\nclass Game {\n  static Status = {\n    idle: \"idle\",\n    playing: \"playing\",\n    win: \"win\",\n    lose: \"lose\",\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.state = [...initialState];\n    this.status = Game.Status.idle;\n    this.score = 0;\n    this.initialState = initialState;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    this.updateStatus();\n\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.Status.playing;\n    this.state = this.initialState.concat();\n    this.createRandomTile();\n    this.createRandomTile();\n    this.printTiles();\n  }\n\n  restart() {\n    this.clearTheBoard();\n    this.printTiles();\n    this.status = Game.Status.idle;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    let didTilesMove = false;\n\n    for (let row = 0; row < 4; row++) {\n      let didJustMerged = false;\n\n      for (let tile = 1; tile < 4; tile++) {\n        if (this.state[row][tile] > 0) {\n          let moveTile = 0;\n\n          let merge = false;\n\n          while (this.state[row][tile - moveTile - 1] === 0) {\n            moveTile++;\n          }\n\n          if (\n            !didJustMerged &&\n            this.state[row][tile - moveTile - 1] === this.state[row][tile]\n          ) {\n            moveTile++;\n            merge = true;\n          }\n\n          if (moveTile > 0) {\n            if (!didJustMerged && merge) {\n              didJustMerged = true;\n\n              const newNumber = this.state[row][tile - moveTile] * 2;\n\n              this.state[row][tile - moveTile] = newNumber;\n\n              this.score += newNumber;\n            } else {\n              didJustMerged = false;\n\n              this.state[row][tile - moveTile] = this.state[row][tile];\n            }\n\n            this.state[row][tile] = 0;\n\n            didTilesMove = true;\n          }\n        }\n      }\n    }\n\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    return didTilesMove;\n  }\n\n  moveRight() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    let didTilesMove = false;\n\n    for (let row = 0; row < 4; row++) {\n      let didJustMerged = false;\n\n      for (let tile = 2; tile >= 0; tile--) {\n        if (this.state[row][tile] > 0) {\n          let moveTile = 0;\n          let merge = false;\n\n          while (this.state[row][tile + moveTile + 1] === 0) {\n            moveTile++;\n          }\n\n          if (\n            !didJustMerged &&\n            this.state[row][tile + moveTile + 1] === this.state[row][tile]\n          ) {\n            moveTile++;\n            merge = true;\n          }\n\n          if (moveTile > 0) {\n            if (!didJustMerged && merge) {\n              didJustMerged = true;\n\n              const newNumber = this.state[row][tile + moveTile] * 2;\n\n              this.state[row][tile + moveTile] = newNumber;\n\n              this.score += newNumber;\n            } else {\n              didJustMerged = false;\n\n              this.state[row][tile + moveTile] = this.state[row][tile];\n            }\n\n            this.state[row][tile] = 0;\n            didTilesMove = true;\n          }\n        }\n      }\n    }\n\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    return didTilesMove;\n  }\n\n  moveUp() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    let didTilesMove = false;\n\n    for (let column = 0; column < 4; column++) {\n      let didJustMerged = false;\n\n      for (let tile = 1; tile < 4; tile++) {\n        if (this.state[tile][column] > 0) {\n          let moveTile = 0;\n          let merge = false;\n\n          while (\n            tile - moveTile - 1 >= 0 &&\n            this.state[tile - moveTile - 1][column] === 0\n          ) {\n            moveTile++;\n          }\n\n          if (\n            !didJustMerged &&\n            tile - moveTile - 1 >= 0 &&\n            this.state[tile - moveTile - 1][column] === this.state[tile][column]\n          ) {\n            moveTile++;\n            merge = true;\n          }\n\n          if (moveTile > 0) {\n            if (!didJustMerged && merge) {\n              didJustMerged = true;\n\n              const newNumber = this.state[tile - moveTile][column] * 2;\n\n              this.state[tile - moveTile][column] = newNumber;\n\n              this.score += newNumber;\n            } else {\n              didJustMerged = false;\n\n              this.state[tile - moveTile][column] = this.state[tile][column];\n            }\n\n            this.state[tile][column] = 0;\n\n            didTilesMove = true;\n          }\n        }\n      }\n    }\n\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    return didTilesMove;\n  }\n\n  moveDown() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    let didTilesMove = false;\n\n    for (let column = 0; column < 4; column++) {\n      let didJustMerged = false;\n\n      for (let tile = 2; tile >= 0; tile--) {\n        if (this.state[tile][column] > 0) {\n          let moveTile = 0;\n          let merge = false;\n\n          while (\n            tile + moveTile + 1 < this.state.length &&\n            this.state[tile + moveTile + 1][column] === 0\n          ) {\n            moveTile++;\n          }\n\n          if (\n            !didJustMerged &&\n            tile + moveTile + 1 < this.state.length &&\n            this.state[tile + moveTile + 1][column] === this.state[tile][column]\n          ) {\n            moveTile++;\n            merge = true;\n          }\n\n          if (moveTile > 0) {\n            if (!didJustMerged && merge) {\n              didJustMerged = true;\n\n              const newNumber = this.state[tile + moveTile][column] * 2;\n\n              this.state[tile + moveTile][column] = newNumber;\n\n              this.score += newNumber;\n            } else {\n              didJustMerged = false;\n\n              this.state[tile + moveTile][column] = this.state[tile][column];\n            }\n\n            this.state[tile][column] = 0;\n\n            didTilesMove = true;\n          }\n        }\n      }\n    }\n\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    return didTilesMove;\n  }\n\n  saveState() {\n    return this.state.map((row) => row.slice());\n  }\n\n  createRandomTile() {\n    let row = this.randomNumber(3);\n\n    while (!this.state[row].includes(0)) {\n      row = this.randomNumber(3);\n    }\n\n    let cell = this.randomNumber(3);\n\n    while (this.state[row][cell] !== 0) {\n      cell = this.randomNumber(3);\n    }\n\n    const newState = this.state.map((currentRow) => currentRow.slice());\n\n    newState[row][cell] = this.generateCellValue();\n    this.state = newState;\n    this.printTiles();\n  }\n\n  randomNumber(max) {\n    return Math.round(Math.random() * max);\n  }\n\n  generateCellValue() {\n    const result = Math.random();\n\n    return result > 0.9 ? 4 : 2;\n  }\n\n  updateStatus() {\n    if (this.didPlayerWin()) {\n      this.status = Game.Status.win;\n    } else if (this.didPlayerLose()) {\n      this.status = Game.Status.lose;\n    }\n  }\n\n  didPlayerWin() {\n    for (const tile of this.state.flat()) {\n      if (tile === 2048) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  didPlayerLose() {\n    for (const tile of this.state.flat()) {\n      if (tile === 0) {\n        return false;\n      }\n    }\n\n    for (let row = 0; row <= 3; row++) {\n      for (let tile = 0; tile <= 2; tile++) {\n        if (this.state[row][tile] === this.state[row][tile + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let column = 0; column <= 3; column++) {\n      for (let tile = 0; tile <= 2; tile++) {\n        if (this.state[tile][column] === this.state[tile + 1][column]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  printTiles() {\n    const cells = document.getElementsByClassName(\"field-cell\");\n    const flatState = this.state.flat();\n\n    for (let i = 0; i < flatState.length; i++) {\n      const currentCell = cells[i];\n      const currentState = flatState[i];\n\n      if (currentState > 0) {\n        if (currentCell !== undefined) {\n          currentCell.textContent = currentState;\n          currentCell.className = `field-cell field-cell--${currentState}`;\n        }\n      } else {\n        if (currentCell !== undefined) {\n          currentCell.textContent = \"\";\n          currentCell.className = \"field-cell\";\n        }\n      }\n    }\n  }\n\n  clearTheBoard() {\n    this.state = this.initialState.concat();\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["key","value","$3d28d7f1aac198f5$exports","$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$3d28d7f1aac198f5$var$Game","protoProps","Game","initialState","arguments","instance","Constructor","TypeError","state","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","status","Status","idle","score","updateStatus","playing","concat","createRandomTile","printTiles","clearTheBoard","saveState","didTilesMove","row","didJustMerged","tile","moveTile","merge","newNumber","column","map","randomNumber","includes","cell","newState","currentRow","generateCellValue","max","Math","round","random","result","didPlayerWin","win","didPlayerLose","lose","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","flat","next","done","err","return","tile1","tile2","cells","document","getElementsByClassName","flatState","currentCell","currentState","textContent","className","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","obj","$197cd56b15c33885$var$game","$197cd56b15c33885$var$startBtn","querySelector","$197cd56b15c33885$var$startMessage","$197cd56b15c33885$var$winMessage","$197cd56b15c33885$var$loseMessage","$197cd56b15c33885$var$score","$197cd56b15c33885$var$handleKeyDown","keyEvent","preventDefault","numbersMove","moveUp","moveDown","moveRight","moveLeft","newScore","getScore","newStatus","getStatus","classList","remove","addEventListener","contains","add","start","removeEventListener","restart"],"version":3,"file":"index.f6dc92ce.js.map"}